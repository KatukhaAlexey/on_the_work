'''
ВОЗМОЖНОСТИ И ПРИМЕРЫ ФУНКЦИИ sorted() в Python

Функция sorted() возвращает новый отсортированный список итерируемого объекта (списка, словаря, кортежа).
По умолчанию она сортирует его по возрастанию.

Основное различие между методом sort() и функцией sorted() заключается в том, что sort() сортирует список на месте,
то есть изменяет сам список и возвращает значение None. Функция sorted() создает копию исходного списка,
сортирует его и возвращает этот список, оставляя исходный список неизменным.

Сортировка строк осуществляется по ASCII-значениям.

sorted(iterable, key=None, reverse=False) -> List

iterable - строка, список, кортеж, множество, словарь
key - если указать ключ, то сортировка будет выполнена по функциии этого ключа.
reverse - по умолчанию сортировка выполняется по возрастанию. Если указать reverse = True, то можно отсортировать по убыванию
'''
# Сортировка строки
string1 = 'hello'
print(f'строка: {string1}')
print(f'вывод сортированной строки sorted(string1):                {sorted(string1)}')
print(f'вывод сортированной строки sorted(string1, reverse=True):  {sorted(string1, reverse=True)}')
# Сортировка списка
list1 = [1, 4, 5, 2, 456, 12]
print(f'список: {list1}')
print(f'вывод сортированного списка sorted(list1):                 {sorted(list1)}')
print(f'вывод сортированного списка sorted(list1, reverse=True):   {sorted(list1, reverse=True)}')
# Сортировка кортежа
tuple1 = (15, 3, 5, 7, 9, 11, 42)
print(f'кортеж: {tuple1}')
print(f'вывод сортированного кортежа sorted(tuple1):               {sorted(tuple1)}')
print(f'вывод сортированного кортежа sorted(tuple1, reverse=True): {sorted(tuple1, reverse=True)}')
# Сортировка списка кортежей
tuple2 = [(1, 2), (11, 12), (0, 2), (3, 2)]
print(f'функция sorted() сортирует кортежи, ориентируясь на их первые элементы.')
print(f'При одинаковых первых элементах критерием сортировки становятся следующие элементы кортежей.')
print(f'список кортежей: {tuple2}')
print(f'вывод сортированного списка кортежей sorted(tuple2):               {sorted(tuple2)}')
print(f'вывод сортированного списка кортежей sorted(tuple1, reverse=True): {sorted(tuple2, reverse=True)}')
# Сортировка множества
set1 = {1, 4, 3, 6, 2, 8, 11, 32}
print(f'множество: {set1}')
print(f'вывод сортированного множества sorted(set1):               {sorted(set1)}')
print(f'вывод сортированного множества sorted(set1, reverse=True): {sorted(set1, reverse=True)}')
# Сортировка словаря
dict1 = {2: 'red', 1: 'green', 3: 'blue'}
print(f'словарь: {dict1}')
print(f'вывод сортированного словаря sorted(dict1):                       {sorted(dict1)}')
print(f'функция sorted() по умолчанию сортирует словари по ключу.')
print(f'вывод сортированного словаря sorted(dict1.keys()):                {sorted(dict1.keys())}')
print(f'вывод сортированного словаря по значению sorted(dict1.values()):  {sorted(dict1.values())}')
'''
ПАРАМЕТР key

Итерируемый объект можно также отсортировать по функции, указанной в параметре key.
Это может быть: 
встроенная функция,
функция определенная пользователем,
лямбда-функция
itemgetter,
attrgetter.

'''

# ВСТРОЕННАЯ ФУНКЦИЯ len()
# len() посчитает длинну объекта. Если указать len в виде параметра key, то сортировка будет выполнена по длине.
dict2 = {'carrot': 'vegetable', 'red': 'color', 'apple': 'fruit'}
print(f'словарь: {dict2}')
print(f'вывод сортированного словаря на основе функции len sorted(dict2, key = len):                  {sorted(dict2, key = len)}')
print(f'вывод сортированных значений словаря на основе функции len sorted(dict2.values(), key = len): {sorted(dict2.values(), key = len)}')

# ВСТРОЕННАЯ ФУНКЦИЯ abs()
# abs() вернет абсолютное значение числа. Если задать abs для key, то сортировка будет основана на абсолютном значении
list2 = [1, -4, 5, -7, 9, 2]
print(f'список: {list2}')
print(f'вывод сортированного списка на основе функции abs sorted(list2, key = abs): {sorted(list2, key = abs)}')

# ВСТРОЕННАЯ ФУНКЦИЯ str.lower()
# str.lower() - конвертирует все символы в верхнем регистре в нижний регистр.
# В таком случае список будет отсортирован так, будто бы все символы в нижнем регистре
list3 = ['Hello', 'How', 'are', 'you']
print(f'список: {list3}')
print(f'вывод сортированного списока sorted(list3):                                              {sorted(list3)}')
print(f'вывод сортированного списока на основе функции str.lower sorted(list3, key = str.lower): {sorted(list3, key = str.lower)}')

# ПОЛЬЗОВАТЕЛЬСКИЕ ФУНКЦИИ
# ПРИМЕР
# по умолчанию сортировка кортежей присходит по первому элементу.
# создадим функцию, которая будет возвращать второй элемент кортежа, по которому и будет происходить сортировка
list4 = [(1, 2, 3), (2, 1, 3), (11, 4, 2), (9, 1, 3), (12, 12, 3), (8, 9, 3), (1, 8, 2), (9, 8, 3)]
# функция принимает какую-то последовательность и возвращает второй элемент этой последовательности (элемент с индексом 1)
def sort_key(l):
    return l[1]
print(f'список кортежей: {list4}')
print(f'отсортированный список кортежей sorted(list4): \n {sorted(list4)}')
print(f'отсортированный список кортежей по второму элементу с применением функции sort_key sorted(list4, key=sort_key): \n {sorted(list4, key=sort_key)}')

# ЛЯМБДА-ФУНКЦИЯ
# В качестве ключа можно задать лямбда-функцию. Сортировка будет выполнятся по ней.
# Сортировка списка кортежей по второму элементу. Лямбда-функция просто возвращает его для каждого переданного объекта
print(f'список кортежей: {list4}')
print(f'отсортированный список кортежей по второму элементу с применением лямбда-функции sorted(list4, key=lambda x: x[1]): \n {sorted(list4, key=lambda x: x[1])}')

# ФУНКЦИИ ВСТРОЕННОГО МОДУЛЯ operator
# operator - это встроенный модуль, включающий множество операторов.
# itemgetter(n) создает функцию, которая принимает итерируемый объект (список, кортеж, множество) и возвращает n-элемент из него.
from operator import itemgetter
print(f'список кортежей: {list4}')
print(f'отсортированный список кортежей по третьему элементу кортежа sorted(list4, key=itemgetter(2)): \n {sorted(list4, key=itemgetter(2))}')
dict3 = [{'name': 'Paul', 'age': 30},
         {'name': 'Alex', 'age': 7},
         {'name': 'Eva', 'age': 3}]
print(f'словарь: {dict3}')
print(f'отсортированный словарь по ключу age sorted(dict3, key=itemgetter("age")): \n {sorted(dict3, key=itemgetter("age"))}')
dict4 = {'a': [1, 2, 3], 'b': [3, 4, 5], 'c': [1, 1, 2], 'd': [1, 4, 3], 'e': [3, 2, 5], 'f': [1, 1, 1]}
print(f'словарь: {dict4}')
print(f'отсортированный словарь по второму значению ключа sorted(dict4.values(), key=itemgetter(1)): \n {sorted(dict4.values(), key=itemgetter(1))}')
# С помощью itemgetter() можно выполнять сортировку на нескольких уровнях
# в словаре проведем сортировку по значениям. Сортировать будем по второму элементу.
# если значения окажутся равными, то сортировка пройдет по третьему элементу.
print(f'словарь: {dict4}')
print(f'отсортированный словарь по второму и третьему значению ключа sorted(dict4.values(), key=itemgetter(1, 2)): \n {sorted(dict4.values(), key=itemgetter(1, 2))}')
# так же можно провести такую сортировку с помощью лямбда-функции
print(f'отсортированный словарь по второму и третьему значению ключа лямбда-функцией sorted(dict4.values(), key=lambda x: x[1:3]): \n {sorted(dict4.values(), key=lambda x: x[1:3])}')