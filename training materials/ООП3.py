# ДЕКОРАТОРЫ @classmethod и @staticmethod
# Методы класса определяются с помощью декоратора @classmethod
# Статические методы определяются с помощью декоратора @staticmethod
# 
# Метод класса работает исключительно с атрибутами класса, но не может обращаться к локальным атрибутам экземпляров класса!
# С помощью @staticmethod можно определить метод класса, который не будет иметь достук ни к атрибутам класса ни к атрибутам экземпляров класса


class Vector:
    min_coord = 0   # Атрибуты класса Vector
    max_coord = 100

    @classmethod    # Объявление метода класса. cls - это ссылка на текущий класс Vector
    def validate(cls, arg): # Метод проверяет, попадает ли аргумент arg в промежуток от 0 до 100
        return cls.min_coord <= arg <= cls.max_coord  # Возвращает True если попадает и False если не попадает
    
    def __init__(self, x, y):
        self.x = 0
        self.y = 0
        # if Vector.validate(x) and Vector.validate(y): # проверяем, входят ли x и y в диапазон от 0 до 100 с помощью метода класса
        if self.validate(x) and self.validate(y):       # более правильно указывать self вместо Vector. При переименовании класса
            self.x = x                            # не будет необходимости менять названия класса в функции
            self.y = y                            # при указании self - ссылка на объект класса, объект будет искать validate() внутри класса

    def get_coord(self):
        return self.x, self.y
    
    @staticmethod # Объявление статического метода класса
    def norm2(x, y): # cls в статическом методе не прописывается. norm2() - это некая вспомогательная сервисная функция вычисления квадрата
        return x**2 + y**2   # нормы радиус-вектора. функция работает только с теми аргументами, которые для нее определены (x, y)



v = Vector(1, 20)
print(Vector.validate(5))  # cls указывать не нужно, интерпретатор подставляет данный аргумент
print(Vector.norm2(5, 6))
res = v.get_coord()
print(res)